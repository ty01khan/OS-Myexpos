multipush(BP);
alias curPID R0;
curPID = [SYSTEM_STATUS_TABLE + 1];
alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + curPID * 16;
[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;

alias cnt R1;
alias state R2;
cnt = 0;
while (cnt < 16) do
	curPID = curPID + 1;
	if (curPID >= 16) then
		curPID = 0;
	endif;
	state = [PROCESS_TABLE + (curPID * 16) + 4];
	if (state == READY || state == CREATED) then
		break;
	endif;
	cnt = cnt + 1;
endwhile;

alias new_process R3;
new_process = PROCESS_TABLE + (curPID * 16);

//Set back Kernel SP, PTBR, PTLR

SP = [new_process + 11] * 512 + [new_process + 12];
PTBR = [new_process + 14];
PTLR = [new_process + 15];
[SYSTEM_STATUS_TABLE + 1] = curPID;

if ([new_process + 4] == CREATED) then
	[new_process + 4] = RUNNING;
	[new_process + 9] = 0;
	SP = [new_process + 13];
	ireturn;
endif;
[new_process + 4] = RUNNING;
multipop(BP);
return;
