// Loading INIT program from disk to memory
loadi(65, 7);	// load disk block 7 to memory page 65
loadi(66, 8);	// load disk block 8 to memory page 66 

// Loading int10 from disk to memory
loadi(22,35);
loadi(23,36);

// Loading MODULE_5 from disk to memory
loadi(50, 63);
loadi(51, 64);

// Loading exhandler from disk to memory
loadi(2, 15);
loadi(3, 16);

// Loding INT7 from disk to memory
loadi(16, 29);
loadi(17, 30);

// Loading timer interrupt routine
loadi(4, 17);
loadi(5, 18);

// Loading library from disk to memory
loadi(63,13);
loadi(64,14);

PTBR = PAGE_TABLE_BASE + 20;	//(FOR INIT PROCESS), PID of init process is 1
PTLR = 10;

//Library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

//Heap
[PTBR + 4] = 78;
[PTBR + 5] = "0110";
[PTBR + 6] = 79;
[PTBR + 7] = "0110";

//Code
[PTBR + 8] = 65;
[PTBR + 9] = "0100";
[PTBR + 10] = 66;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

//Stack
[PTBR + 16] = 76;
[PTBR + 17] = "0110";
[PTBR + 18] = 77;
[PTBR + 19] = "0110";


[PROCESS_TABLE + 17] = 1;	//first PT entry, PID = 1 (for init process)
[PROCESS_TABLE + 20] = 3;	//State CREATED, (for init process)
[PROCESS_TABLE + 27] = 80;	//User Area Page Number = 80, (for init process)
[PROCESS_TABLE + 28] = 0;	//KPTR = 0,	(for init process)
[PROCESS_TABLE + 29] = 8*512;	//UPTR = 8*512, (for init process)
[PROCESS_TABLE + 30] = PTBR;
[PROCESS_TABLE + 31] = PTLR;

[76*512] = [65 * 512 + 1];


// Odd Programs starting from page 83
// Loadng EXEC(odd) program from disk to memory
loadi(83, 71);

PTBR = PAGE_TABLE_BASE + 40;
PTLR = 10;

// Library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

//Heap
[PTBR + 4] = 87;
[PTBR + 5] = "0110";
[PTBR + 6] = 88;
[PTBR + 7] = "0110";

//Code
[PTBR + 8] = 83;
[PTBR + 9] = "0100";
[PTBR + 10] = -1;
[PTBR + 11] = "0000";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

//Stack
[PTBR + 16] = 85;
[PTBR + 17] = "0110";
[PTBR + 18] = 86;
[PTBR + 19] = "0110";

[PROCESS_TABLE + 33] = 2;	//first PT entry, PID = 1 (for exec process)
[PROCESS_TABLE + 36] = CREATED;	//State CREATED, (for init process)
[PROCESS_TABLE + 43] = 89;	//User Area Page No. = 89,(for exec process)
[PROCESS_TABLE + 44] = 0;	//KPTR = 0,	(for exec process)
[PROCESS_TABLE + 45] = 8*512;	//UPTR = 8*512, (for exec process)
[PROCESS_TABLE + 46] = PTBR;
[PROCESS_TABLE + 47] = PTLR;

[85*512] = [83 * 512 + 1];

// Prime Programs starting from page 83
// Loadng EXEC(odd) program from disk to memory
loadi(90, 70);

PTBR = PAGE_TABLE_BASE + 60;
PTLR = 10;

// Library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

//Heap
[PTBR + 4] = 93;
[PTBR + 5] = "0110";
[PTBR + 6] = 94;
[PTBR + 7] = "0110";

//Code
[PTBR + 8] = 90;
[PTBR + 9] = "0100";
[PTBR + 10] = -1;
[PTBR + 11] = "0000";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

//Stack
[PTBR + 16] = 91;
[PTBR + 17] = "0110";
[PTBR + 18] = 92;
[PTBR + 19] = "0110";

[PROCESS_TABLE + 49] = 3;	//first PT entry, PID = 1 (for exec process)
[PROCESS_TABLE + 52] = CREATED;	//State CREATED, (for init process)
[PROCESS_TABLE + 59] = 95;	//User Area Page No. = 89,(for exec process)
[PROCESS_TABLE + 60] = 0;	//KPTR = 0,	(for exec process)
[PROCESS_TABLE + 61] = 8*512;	//UPTR = 8*512, (for exec process)
[PROCESS_TABLE + 62] = PTBR;
[PROCESS_TABLE + 63] = PTLR;

[91*512] = [90 * 512 + 1];

alias count R2;
count = 4;
while (count < 16) do
	[PROCESS_TABLE + count * 16 + 4] = TERMINATED;
	count = count + 1;
endwhile;

return;
