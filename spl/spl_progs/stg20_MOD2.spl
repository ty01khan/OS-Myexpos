//Implementing Memory Manager Module (Module-2)

//[SYSTEM_STATUS_TABLE + 2] is MEM_FREE_COUNT
//[SYSTEM_STATUS_TABLE + 3] is WAIT_MEM_COUNT

alias functionNum R1;
alias pageNum R2;

//Get Code Page
if (functionNum == 5) then
	alias blockNum R2;
	alias Pid R3;
	alias found R4;
	alias addr R5;
	
	Pid = 1;
	while (Pid < 16) do
		alias entry R6;
		entry = 4;
		while (entry < 8) do
			addr = DISK_MAP_TABLE + (Pid * 10) + entry;
			if ([addr] == blockNum) then
				alias PtBr R7;
				PtBr = [PROCESS_TABLE + (Pid * 16) + 14];
				
				//if page table entry is valid
				if ([PtBr + (2*entry) + 1] == "0100") then
					R0 = [PtBr + (2 * entry)];
					[MEMORY_FREE_LIST + R0] = [MEMORY_FREE_LIST + R0] + 1;
					return;
				endif;
			endif;
			entry = entry + 1;
		endwhile;
		Pid = Pid + 1;
	endwhile;
	
	
	//if code page is not in memory, then call Get Free Page function to allocate new page
	
	alias pageNum R3;
	//Get Free Page function
	multipush(R1, R2);
	R1 = 1;
	call MOD_2;
	multipop(R1, R2);
	
	//Disk Load function
	pageNum = R0;
	R4 = blockNum;
	multipush(R1, R2, R3);
	R1 = 2;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = pageNum;
	call MOD_4;
	multipop(R1, R2, R3);
	
	R0 = pageNum;
	return;
endif;

//Get Free Page
if (functionNum == 1) then
	[SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;
	
	alias MemFreeCnt R3;
	MemFreeCnt = [SYSTEM_STATUS_TABLE + 2];
	while (MemFreeCnt == 0) do
		[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 4] = WAIT_MEM;
		
		//Invoking Context Switch Module
		multipush(R1, R2, R3);
		call MOD_5;
		multipop(R1, R2, R3);
		MemFreeCnt = [SYSTEM_STATUS_TABLE + 2];
	endwhile;
	
	[SYSTEM_STATUS_TABLE+ 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
	[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
	
	alias inodeInd R4;
	inodeInd = 0;
	while (inodeInd < MAX_MEM_PAGE) do
		if ([MEMORY_FREE_LIST + inodeInd] == 0) then
			R0 = inodeInd;
			[MEMORY_FREE_LIST + inodeInd] = 1;
			break;
		endif;
		inodeInd = inodeInd + 1;
	endwhile;
	breakpoint;
	return;
endif;

//Release Page
if (functionNum == 2) then
	alias Pid R3;
	[MEMORY_FREE_LIST + pageNum] = [MEMORY_FREE_LIST + pageNum] - 1;
	
	if ([MEMORY_FREE_LIST + pageNum] == 0) then
		[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
		Pid = 1;
		while (Pid < 16) do
			if ([PROCESS_TABLE + (Pid * 16) + 4] == WAIT_MEM) then
				[PROCESS_TABLE + (Pid * 16) + 4] = READY;
			endif;
			Pid = Pid + 1;
		endwhile;
	endif;
	breakpoint;
	return;
endif;

//Release Block
if(functionNum == 4) then
	alias blockNum R2;
	[DISK_FREE_LIST + blockNum] = [DISK_FREE_LIST + blockNum] - 1;
	return;
endif;
