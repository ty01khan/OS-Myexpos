//loading IDLE program from disk to memory
loadi(69, 11);
loadi(70, 12);

//loading Boot Module(MOLULE 7) from disk to memory
loadi(54, 67);
loadi(55, 68);

SP = 82*512 - 1;	//setup the stack for calling the boot module(Kernal stack pointer)

call BOOT_MODULE;
PTBR = PAGE_TABLE_BASE;	//(FOR IDLE PROCESS), PID of idle process is 0
PTLR = 10;

//Library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

//Heap
[PTBR + 4] = -1;
[PTBR + 5] = "0000";
[PTBR + 6] = -1;
[PTBR + 7] = "0000";

//Code
[PTBR + 8] = 69;
[PTBR + 9] = "0100";
[PTBR + 10] = 70;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

//Stack
[PTBR + 16] = 81;
[PTBR + 17] = "0110";
[PTBR + 18] = -1;
[PTBR + 19] = "0000";

[PROCESS_TABLE + 1] = 0;	//first PT entry, PID = 0 (for idle process)
[PROCESS_TABLE + 4] = 2;	//State RUNNING, (for idle process)
[PROCESS_TABLE + 11] = 82;	//User Area Page Number = 82, (for idle process)
[PROCESS_TABLE + 12] = 0;	//KPTR = 0,	(for idle process)
[PROCESS_TABLE + 13] = 8*512;	//UPTR = 8*512, (for idle process)
[PROCESS_TABLE + 14] = PTBR;
[PROCESS_TABLE + 15] = PTLR;

[SYSTEM_STATUS_TABLE + 1] = 0;	//points to the starting address of the System Status Table, (PID of running process)

[81*512] = [69 * 512 + 1];
SP = 8*512;

ireturn;	//switch to user mode 
